# -*- coding: utf-8 -*-
"""FPFix.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19CN2fYo6F3_irjfgPPrr010FYJi6Ajet

|   |Final Project|   |
|---|---|---|

|   |Kelompok 7|   |
|---|---|---|

|Nama|Nim|Kelas|
|---|---|---|
|Muhammad Fathir|21.11.4235|21IF06|
|R Fajar Dwi|21.11.4246|21IF06|

**UAS BIG DATA & DATA MINING**

# KLASIFIKASI FETAL HEALTH

---

METODE SUPPORT VECTOR MACHINES (SVM)

# Import Library
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.metrics import *
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

import warnings
warnings.filterwarnings('ignore')

"""# Load Dataset"""

df = pd.read_csv('fetal_health.csv')

"""# Visualisasi Data"""

print(df.head(15))

print(df.info())

print(df.head(15))

"""# Data Preprocessing"""

#mengecek ada atau tidaknya data kosong (null)
(df.isna().sum()).to_frame('Total Nilai Missing')

(df.isna().sum()/len(df)).to_frame('Persentase Missing')

"""dataset yang digunakan tidak memiliki data kosong bahkan dalam bentuk persentase"""

#pengecekan korelasi antar kolom
cor = df.corr()
plt.figure(figsize=(12,8))
sns.heatmap(df.corr(),cmap='YlGnBu', annot= True)
plt.show()

#menghapus data duplikat
df.drop_duplicates(inplace=True)

"""# Menampilkan jumlah data dari Fetal_health"""

print(df['fetal_health'].value_counts())

df['fetal_health'] = df['fetal_health'].replace([1.0,2.0,3.0],['normal','suspect','pathological'])
print(df['fetal_health'].value_counts().plot(kind='bar'))
plt.show()
#menggambarkan kolom fetal_health dalam bentuk bar
#

X = df.iloc[:, df.columns != 'fetal_health'].values
#mendeskripsikan variabel X yang berisi semua kolom kecuali fetal_health

y = df[['fetal_health']].values
#mendeskripsikan variabel y yang berisi kolom fetal_health

scaler=StandardScaler()
scaler.fit(X)
X=scaler.transform(X)
#memasukkan variabel X kedalam scaler transform
#

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
#memisahkan data training dan data testing

print(X_train)

print(X_test)

#membuat model klasifikasi dengan algoritma SVM
classifierSVM= svm.SVC(kernel='linear')

#training model klasifikasi
classifierSVM.fit(X_train, y_train)

y_pred = classifierSVM.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

#menampilkan y prediksi dari data yang sudah dibuat model kalsifikasinya

#melakukan prediksi
SVM_pred = classifierSVM.predict(X_test)

"""# Model Evaluation"""

from sklearn.metrics import confusion_matrix, accuracy_score
cm=confusion_matrix(y_test, y_pred)
print(cm)
#

# #menampilkan confusion matriks
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
clf = SVC(random_state=0)
clf.fit(X_train, y_train)
SVC(random_state=0)
predictions = clf.predict(X_test)
cm = confusion_matrix(y_test, predictions, labels=clf.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=clf.classes_)

disp.plot()
plt.show()
#

# #menampilkan confusion matriks
# !pip install --upgrade scikit-learn
# !pip install matplotlib-venn

# from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
# disp = ConfusionMatrixDisplay(classifierSVM,X_test,y_test)
# plt.show()

accuracy_score(y_test, y_pred)
#menampilkan nilai akurasi dari
#data training dan data testing dengan algoritma yg sudah dimasukkan

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))
#